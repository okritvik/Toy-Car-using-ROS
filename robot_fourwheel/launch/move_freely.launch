<launch>
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
	    <arg name="paused" value="false"/>
	</include>

  <!-- Defining this param here helps you store all the urdf contents of robot+lidar into a single param name -->
        <!-- fill the command by adding in the path to your .xacro file the $ symbol below -->
        <!--  -->
	<param name= "robot_description" command="$(find xacro)/xacro --inorder $(find robot_fourwheel)/urdf/my_robot_integration.urdf.xacro" />
    <!-- Add in your robot name in the value tag -->
    <param name = "my_robot" value="robot_fourwheel"/> 
	<arg name ="init_pose" value="-x 0 -y 0 -z 0.045 -R 0 -P 0 -Y 0"/>
    

    <!-- This command adds the controller variables you defined in the config file into ros's parameter list. Simply add the file name in the file tag -->
	<rosparam file="$(find project1_control)/config/config.yaml" command="load"/>


	<!-- Node for publishing base footprint -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="False"/>
    </node>



    <!-- Controller spawner: Starts all the defined controllers with their configs. Just add your controller names defined in your config file into the args tag below   -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    	output="screen" ns="/robot_fourwheel" args="joint_state_controller raj_velocity_controller flj_position_controller frj_position_controller" />


    <!-- A node to publish the robot states onto ros network -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>	


    <!-- A node to spawn the robot into gazebo's world file. Notice that the args has the param robot_description that you previously defined. This is how your robot's spec gets included.-->
   	
       <!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /dummy_link 10" />
    <!-- <node
    name="tf_footprint_base"
    pkg="tf"
    type="static_transform_publisher"
    args="0 0 0 0 0 0 dummy_link base_footprint 40" />
     -->
  <node
    name="spawn_model"
    pkg="gazebo_ros"
    type="spawn_model"
    args="$(arg init_pose) -param robot_description -urdf -model robot_fourwheel"
    output="screen" />


	<!--Default node -->
	<node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />

    <!-- <node pkg="project1_control" name="my_teleop" type="my_teleop.py" output="screen"> 
    </node> -->
</launch>